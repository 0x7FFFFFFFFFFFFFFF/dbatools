function Get-DbaMaintenanceSolutionIndexOptimizeLog {
<#
.SYNOPSIS
Reads the log files generated by the IndexOptimize Agent Job from Ola Hallengren's MaintenanceSolution.

.DESCRIPTION
Ola wrote a .sql script to get the content from the commandLog table. However, if LogToTable='N', there will be no logging in that table. This function reads the text files that are written in the SQL Instance's Log directory.

.PARAMETER SqlInstance
The SQL Server instance. 

.PARAMETER SqlCredential
Allows you to login to servers using SQL Logins as opposed to Windows Auth/Integrated/Trusted. To use:
$scred = Get-Credential, then pass $scred object to the -SqlCredential parameter. 
Windows Authentication will be used if SqlCredential is not specified. SQL Server does not accept Windows credentials being passed as credentials. To connect as a different Windows user, run PowerShell as that user.

.PARAMETER Silent 
Use this switch to disable any kind of verbose messages

.NOTES 
Author: Klaas Vandenberghe ( @powerdbaklaas )
Website: https://dbatools.io
Copyright: (C) Chrissy LeMaire, clemaire@gmail.com
License: GNU GPL v3 https://opensource.org/licenses/GPL-3.0

.LINK
https://dbatools.io/Get-DbaMaintenanceSolutionIndexOptimizeLog

.EXAMPLE 
Get-DbaMaintenanceSolutionIndexOptimizeLog -SqlInstance sqlserver2014a

Gets the outcome of the IndexOptimize job on sql instance sqlserver2014a

.EXAMPLE 
Get-DbaMaintenanceSolutionIndexOptimizeLog -SqlInstance sqlserver2014a -SqlCredential $credential

Gets the outcome of the IndexOptimize job on sqlserver2014a, using SQL Authentication
		
.EXAMPLE 
'sqlserver2014a', 'sqlserver2020test' | Get-DbaMaintenanceSolutionIndexOptimizeLog
	
Gets the outcome of the IndexOptimize job on sqlserver2014a and sqlserver2020test.
	
#>
	[CmdletBinding(DefaultParameterSetName = "Default")]
	param (
		[parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[Alias("ServerInstance", "SqlServer")]
		[DbaInstanceParameter[]]$SqlInstance,
		[Alias("Credential")]
		[PSCredential][System.Management.Automation.CredentialAttribute()]
		$SqlCredential,
		[switch]$Silent
)

PROCESS {
foreach ( $instance in $sqlinstance )
    {
    $LogDir = $Logfiles = $null
    $ComputerName = $instance.Split('\')[0]
    Write-Message -Level Verbose -Message "Connecting to $instance"
	try {
		$server = Connect-SqlServer -SqlServer $instance -SqlCredential $sqlcredential
	}
	catch {
		Stop-Function -Message "Can't connect to $instance"
		Continue
	}
    $LogDir = $server.errorlogpath -replace '^(.):',"\\$ComputerName\`$1$"
    if ( !$LogDir )
        {
        Write-Message -Level Warning -Message "No log directory returned from $instance"
        Continue
        }
    Write-Message -Level Verbose -Message "Log directory on $ComputerName is $LogDir"
    $Logfiles = Get-ChildItem $LogDir -Filter IndexOptimize_* | select -ExpandProperty fullName
    if ( ! $Logfiles.count -ge 1 )
        {
        Write-Message -Level Warning -Message "No log files returned from $ComputerName"
        Continue
        }
    $Instobj = @{}
    $Instobj['ComputerName'] = $server.NetName
    $Instobj['InstanceName'] = $server.ServiceName
    $Instobj['SqlInstance'] = $server.Name
    foreach ( $File in $Logfiles )
        {
        Write-Message -Level Verbose -Message "Reading $file"
        $text = New-Object System.IO.StreamReader -Arg "$File"
        while ($line = $text.ReadLine()) {
            if ( $line -match '^Database: \[(?<database>[^\]]+)' )
                {
                $DBobj = $Instobj.Clone()
                # $DBobj['Database'] = $line.Split(': ')[-1]
                $DBobj['Database'] = $Matches.database 
                Write-Message -Level Verbose -Message "Index Optimizations on Database $($DBobj.Database) on $ComputerName"
                }
            if ( $line -match '^Status | ^Standby | ^Updateability | ^Useraccess | ^Isaccessible | ^RecoveryModel' )
                {
                $dbkey = $line.Split(': ')[0]
                $dbvalue = $line.Split(': ')[-1]
                $DBobj[$dbkey] = $dbvalue
                }
            if ( $line -match '^Command: ALTER INDEX \[(?<index>[^\]]+)\] ON \[(?<database>[^\]]+)\]\.\[(?<schema>[^]]+)\]\.\[(?<table>[^\]]+)\] (?<action>[^\ ]+) WITH \((?<options>[^\)]+)')
                {
                $IndObj = $DBobj.Clone()
                $IndObj['Index'] = $Matches.index
                $IndObj['Schema'] = $Matches.Schema
                $IndObj['Table'] = $Matches.Table
                $IndObj['action'] = $Matches.action
                $IndObj['options'] = $Matches.options
                Write-Message -Level Verbose -Message "Index $($IndObj.Index) on Table $($IndObj.Table) in Database $($IndObj.Database) on $ComputerName"
                }
            if ( $line -match "^Comment: ")
                {
                $line = $line.Replace('Comment: ','')
                $commentparts =  $line.Split(',')
                foreach ( $part in $commentparts )
                    {
                    $indkey,$indvalue = $part.trim().split(': ')
                    $IndObj[$indkey] = $indvalue[-1]
                    }
                }
            if ( $line -match "^Outcome: ") { $IndObj['outcome'] = $line.Split(': ')[-1] }
            if ( $durationIndicator -eq $true )
                {
                $IndObj['Endtime'] = $line -replace ('Date and Time: ','')
                $durationIndicator = $false
                [PSCustomObject]$IndObj
                }
            if ( $line -match "^Duration: ")
                {
                $durationIndicator = $true
                $IndObj['Duration'] = $line.Split(': ')[-3..-1] -join ':'
                }
            } #foreach Line
            $text.close()
        } #foreach file
    } #foreach instance
} #PROCESS
} #function