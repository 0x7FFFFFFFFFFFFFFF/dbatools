function Export-DbaDiagnosticQuery {
<#
.SYNOPSIS 
Export-DbaDiagnosticQuery can convert row generated by Invoke-DbaDiagnosticQuery to CSV or Excel

.DESCRIPTION
The default output format of Invoke-DbaDiagnosticQuery is row. It can also output to CSV and Excel. 
However, CSV output can generate a lot of files and Excel output depends on the ImportExcel module by Doug Fike (https://github.com/dfinke/ImportExcel)
Export-DbaDiagnosticQuery can be used to convert from the default export type to the other available export types.

.PARAMETER InputObject
Specifies the objects to convert
	
.PARAMETER ConvertTo
Specifies the output type. Valid choices are Excel and Csv. Csv is the default.
	
.PARAMETER Destination
Specifies the path to the output files. 
	
.PARAMETER Silent
Use this switch to disable any kind of Output messages

.NOTES
Author: AndrÃ© Kamman (@AndreKamman), http://clouddba.io

dbatools PowerShell module (https://dbatools.io, clemaire@gmail.com)
Copyright (C) 2016 Chrissy LeMaire
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.	

.LINK
https://dbatools.io/Export-DbaDiagnosticQuery

.EXAMPLE  
Export-DbaDiagnosticQuery -InputObject c:\users\myusername\documents\myfilename.row -To Excel -Destination c:\users\myusername\documents\

Converts the specified row to possibly multiple Excel sheets
If no Destination is specified, the "My Documents" location will be used

.EXAMPLE  
Export-DbaDiagnosticQuery -InputObject c:\users\myusername\documents\myfilename.row -To Csv -Destination c:\temp

Converts the specified row to multiple CSV files
#>
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[object[]]$InputObject,
		[ValidateSet("Excel", "Csv")]
		[string]$ConvertTo = "Csv",
		[System.IO.FileInfo]$Destination = [Environment]::GetFolderPath("mydocuments"),
		[string]$Suffix = "$(Get-Date -format 'yyyyMMddHHmmssms')",
		[switch]$Silent
	)
	
	begin {
		if ($convertto -eq "Excel") {
			try {
				Import-Module ImportExcel -ErrorAction Stop
			}
			catch {
				Stop-Function -Message "Failed to load module, exporting to Excel feature is not available"
				Stop-Function -Message "Install the module from: https://github.com/dfinke/ImportExcel"
				Stop-Function -Message "Valid alternative conversion format is csv"
			}
		}
		
		Function Remove-InvalidFileNameChars {
			param (
				[Parameter(Mandatory = $true,
						   Position = 0,
						   ValueFromPipeline = $true,
						   ValueFromPipelineByPropertyName = $true)]
				[String]$Name
			)
			$Name = $Name.Replace(" ","-")
			$invalidChars = [IO.Path]::GetInvalidFileNameChars() -join ''
			$re = "[{0}]" -f [RegEx]::Escape($invalidChars)
			return ($Name -replace $re)
		}
	}
	
	process {
		if (Test-FunctionInterrupt) { return }
		
		foreach ($row in $inputobject) {
			$results = $row.Result
			$name = $row.Name
			$sqlserver = $row.SqlInstance.Replace("\", "$")
			$dbname = $row.DatabaseName
			$number = $row.Number
			
			if ($null -eq $results){
				Stop-Function -Message "Resultset was empty for $name" -Target $row -Continue
			}
			
			foreach ($result in $results) {
				
				if ($null -eq $result) {
					Stop-Function -Message "Result was empty for $name" -Target $row -Continue
				}
				
				$queryname = Remove-InvalidFileNameChars -Name $Name
				$excelfilename = "$destination\$sqlserver-DQ-$suffix.xlsx"
				$exceldbfilename = "$destination\$sqlserver-DQ-$dbname-$suffix.xlsx"
				$csvdbname = "$destination\$sqlserver-$dbname-DQ-$number-$queryname-$suffix.csv"
				$csvfilename = "$destination\$sqlserver-DQ-$number-$queryname-$suffix.csv"
				
				switch ($convertto) {
					"Excel"
					{
						if ($result.dbSpecific) {
							Write-Message -Level Output -Message "Exporting $exceldbfilename"
							$result.result | Export-Excel -Path $exceldbfilename -WorkSheetname $result.Name -AutoSize -AutoFilter -BoldTopRow -FreezeTopRow
						}
						else {
							Write-Message -Level Output -Message "Exporting $excelfilename"
							$result.result | Export-Excel -Path $excelfilename -WorkSheetname $result.Name -AutoSize -AutoFilter -BoldTopRow -FreezeTopRow
						}
					}
					"csv"
					{
						if ($result.dbSpecific) {
							Write-Message -Level Output -Message "Exporting $csvdbfilename"
							$result | Export-Csv -Path $csvdbfilename -NoTypeInformation
						}
						else {
							Write-Message -Level Output -Message "Exporting $csvfilename"
							$result | Export-Csv -Path $csvfilename -NoTypeInformation
						}
					}
				}
			}
		}
	}
}
